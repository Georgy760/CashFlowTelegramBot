using System.Reflection;
using System.Runtime.InteropServices;
using CashFlowTelegramBot.Skywards.Web;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using File = System.IO.File;

namespace CashFlowTelegramBot.Skywards.Telegram;

public partial class Languages
{
    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuRU =
        InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuENG =
        InlineKeyboardButton.WithCallbackData("üîô Back", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuFR =
        InlineKeyboardButton.WithCallbackData("üîô Retour", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuDE =
        InlineKeyboardButton.WithCallbackData("üîô Zur√ºck", "MainMenu");


    //LANGUAGE MENU//
    public static async void LanguageMenu(ITelegramBotClient botClient, long chatId)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/langSelection.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\langSelection.png");
        InlineKeyboardMarkup? inlineKeyboard;
        inlineKeyboard = new InlineKeyboardMarkup(
            // keyboard
            new[]
            {
                // first row
                new[]
                {
                    // first button in row
                    InlineKeyboardButton.WithCallbackData("üá¨üáß English", "ChangeToENG"),
                    // second button in row
                    InlineKeyboardButton.WithCallbackData("üá´üá∑ Fran√ßais", "ChangeToFR")
                },
                // second row
                new[]
                {
                    // first button in row
                    InlineKeyboardButton.WithCallbackData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ChangeToRU"),
                    // second button in a row
                    InlineKeyboardButton.WithCallbackData("üá©üá™ Deutsch", "ChangeToDE")
                }
            });

        var sentPhoto = await botClient.SendPhotoAsync(
            chatId,
            File.OpenRead(path)!,
            "üåê Language menu:" +
            "\n\nClick the corresponding button to change the language:",
            replyMarkup: inlineKeyboard);
    }

    //FIRST LANGUAGE MENU//
    public static async void RegLanguageMenu(ITelegramBotClient botClient, long chatId)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/langSelection.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\langSelection.png");
        var inlineKeyboard = new InlineKeyboardMarkup(
            new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üá¨üáß English", "Reg_ENG"),
                    InlineKeyboardButton.WithCallbackData("üá´üá∑ Fran√ßais", "Reg_FR")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "Reg_RU"),
                    InlineKeyboardButton.WithCallbackData("üá©üá™ Deutsch", "Reg_DE")
                }
            });

        var sentPhoto = await botClient.SendPhotoAsync(
            chatId,
            File.OpenRead(path)!,
            "üåê Language menu:" +
            "\n\nClick the corresponding button to change the language:",
            replyMarkup: inlineKeyboard);
    }

    //GET USER DATA//
    public static async void GetUserData(ITelegramBotClient botClient, long chatId, string lang,
        UserProfile SearchedUser,
        Table.TableRole tableRole)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/status.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\status.png");
        UserData invitedBy = null;
        if (SearchedUser.refId != null)
            invitedBy = await WebManager.SendData(new UserProfile((int) SearchedUser.refId),
                WebManager.RequestType.GetUserData);

        var tableToBack = await WebManager.SendData(SearchedUser, WebManager.RequestType.GetTableData);
        if (tableToBack.tableData.tableID != 0)
        {
            var callbackAddress = GetCallbackAddress(tableToBack.tableData.tableType);

            InlineKeyboardMarkup? inlineKeyboard = null;
            var flag = false;
            var searchedUserRole = SearchedUser.GetTableRole(lang);
            var IsSearchedUserVerf =
                (tableToBack.tableData.giverA_ID == SearchedUser.id && tableToBack.tableData.verf_A) ||
                (tableToBack.tableData.giverB_ID == SearchedUser.id && tableToBack.tableData.verf_B) ||
                (tableToBack.tableData.giverC_ID == SearchedUser.id && tableToBack.tableData.verf_C) ||
                (tableToBack.tableData.giverD_ID == SearchedUser.id && tableToBack.tableData.verf_D);
            if (!(tableToBack.tableData.bankerID == SearchedUser.id || tableToBack.tableData.managerA_ID ==
                                                                    SearchedUser.id
                                                                    || tableToBack.tableData.managerB_ID ==
                                                                    SearchedUser.id))
            {
                if (IsSearchedUserVerf)
                    searchedUserRole += " ‚úÖ ";
                else searchedUserRole += " ‚ùå ";
            }

            switch (lang)
            {
                case "ru":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_A)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverARU,
                                            Tables.InlineKeyboardButtonVerfGiverARU
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_B)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverBRU,
                                            Tables.InlineKeyboardButtonVerfGiverBRU
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_C)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverCRU,
                                            Tables.InlineKeyboardButtonVerfGiverCRU
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_D)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverDRU,
                                            Tables.InlineKeyboardButtonVerfGiverDRU
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }
                    }

                    if (!flag)
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("üîô –ù–∞–∑–∞–¥", callbackAddress)
                                }
                            });

                    if (invitedBy != null)
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \n\n" +
                            $"–†–æ–ª—å: {searchedUserRole}\n" +
                            $"–ù–∏–∫: @{SearchedUser.username}\n" +
                            $"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: @{invitedBy.playerData.username}\n" +
                            $"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {SearchedUser.invited}" +
                            $"\n\n–°–≤—è–∑–∞—Ç—å—Å—è c @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n" +
                            $"–†–æ–ª—å: {searchedUserRole}\n" +
                            $"–ù–∏–∫: @{SearchedUser.username}\n" +
                            $"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {SearchedUser.invited}" +
                            $"\n\n–°–≤—è–∑–∞—Ç—å—Å—è c @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "eng":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_A)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverAENG,
                                            Tables.InlineKeyboardButtonVerfGiverAENG
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô  Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô  Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_B)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverBENG,
                                            Tables.InlineKeyboardButtonVerfGiverBENG
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_C)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverCENG,
                                            Tables.InlineKeyboardButtonVerfGiverCENG
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_D)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverDENG,
                                            Tables.InlineKeyboardButtonVerfGiverDENG
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("üîô Back", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }
                    }

                    if (!flag)
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("üîô  Back", callbackAddress)
                                }
                            });

                    if (invitedBy != null)
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã User info:\n\n" +
                            $"Role: {searchedUserRole}\n" +
                            $"Nickname: @{SearchedUser.username}\n" +
                            $"Invited by: @{invitedBy.playerData.username}\n" +
                            $"Personally invited: {SearchedUser.invited}" +
                            $"\n\nContact with @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã User info:\n\n" +
                            $"Role: {searchedUserRole}\n" +
                            $"Nickname: @{SearchedUser.username}\n" +
                            $"Personally invited: {SearchedUser.invited}" +
                            $"\n\nContact with @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "fr":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_A)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverAFR,
                                            Tables.InlineKeyboardButtonVerfGiverAFR
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_B)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverBFR,
                                            Tables.InlineKeyboardButtonVerfGiverBFR
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_C)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverCFR,
                                            Tables.InlineKeyboardButtonVerfGiverCFR
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_D)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverDFR,
                                            Tables.InlineKeyboardButtonVerfGiverDFR
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }
                    }

                    if (!flag)
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                }
                            });

                    if (invitedBy != null)
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã Informations de l'utilisateur:\n\n" +
                            $"R√¥le: {searchedUserRole}\n" +
                            $"Surnom: @{SearchedUser.username}\n" +
                            $"inviter par: @{invitedBy.playerData.username}\n" +
                            $"invit√© personnellement: {SearchedUser.invited}" +
                            $"\n\nContacter avec @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "üìã Informations de l'utilisateur:\n\n" +
                            $"R√¥le: {searchedUserRole}\n" +
                            $"Surnom: @{SearchedUser.username}\n" +
                            $"invit√© personnellement: {SearchedUser.invited}" +
                            $"\n\nContacter avec @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "de":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_A)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverADE,
                                            Tables.InlineKeyboardButtonVerfGiverADE
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_B)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverBDE,
                                            Tables.InlineKeyboardButtonVerfGiverBDE
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_C)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverCDE,
                                            Tables.InlineKeyboardButtonVerfGiverCDE
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            if (!tableToBack.tableData.verf_D)
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            Tables.InlineKeyboardButtonRemoveFromTableGiverDDE,
                                            Tables.InlineKeyboardButtonVerfGiverDDE
                                        },
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                            else
                            {
                                inlineKeyboard = new InlineKeyboardMarkup(
                                    new[]
                                    {
                                        new[]
                                        {
                                            InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                        }
                                    });
                                flag = true;
                            }
                        }
                    }

                    if (!flag)
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                }
                            });

                    if (invitedBy != null)
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "üìã Benutzerinformation: \n\n" +
                            $"Rolle: {searchedUserRole}\n" +
                            $"Spitzname: @{SearchedUser.username}\n" +
                            $"ingeladen von: @{invitedBy.playerData.username}\n" +
                            $"Pers√∂nlich eingeladen: {SearchedUser.invited}" +
                            $"\n\nKontakt mit @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Benutzerinformation\n\n" +
                            $"Rolle: {searchedUserRole}\n" +
                            $"Spitzname: @{SearchedUser.username}\n" +
                            $"Pers√∂nlich eingeladen: {SearchedUser.invited}" +
                            $"\n\nKontakt mit @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
            }
        }
        else
        {
            InlineKeyboardMarkup? inlineKeyboard;
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–æ–ª–∞",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "You are no longer a member of the table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "fe":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Vous n'√™tes plus membre de la table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Sie sind kein Mitglied des Tisches mehr",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }
    }

    private static string GetCallbackAddress(Table.TableType tableType)
    {
        var callbackAddress = "";
        switch (tableType)
        {
            case Table.TableType.copper:
                callbackAddress = "OpenCopperTable";
                break;
            case Table.TableType.bronze:
                callbackAddress = "OpenBronzeTable";
                break;
            case Table.TableType.silver:
                callbackAddress = "OpenSilverTable";
                break;
            case Table.TableType.gold:
                callbackAddress = "OpenGoldTable";
                break;
            case Table.TableType.platinum:
                callbackAddress = "OpenPlatinumTable";
                break;
            case Table.TableType.diamond:
                callbackAddress = "OpenDiamondTable";
                break;
        }

        return callbackAddress;
    }

    //Team on tables//
    public static async void ShowListTeam(ITelegramBotClient botClient, long chatId, string lang, UserProfile user)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/status.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\status.png");
        var table = await WebManager.SendData(user, WebManager.RequestType.GetTableData);
        if (table.tableData.tableID != 0)
        {
            var callbackAddress = GetCallbackAddress(table.tableData.tableType);


            var tableInfo = "";
            InlineKeyboardMarkup? inlineKeyboard = null;
            if (table.tableData.bankerID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.bankerID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üè¶–ë–∞–Ω–∫–∏—Ä: @{userData.playerData.username}\n";
            }

            if (table.tableData.managerA_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerA_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üë§–ú–µ–Ω–µ–¥–∂–µ—Ä-1: @{userData.playerData.username}\n";
            }

            if (table.tableData.managerB_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerB_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üë§–ú–µ–Ω–µ–¥–∂–µ—Ä-2: @{userData.playerData.username}\n";
            }

            if (table.tableData.giverA_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverA_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üéÅ–î–∞—Ä–∏—Ç–µ–ª—å-1: @{userData.playerData.username}\n";
            }

            if (table.tableData.giverB_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverB_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üéÅ–î–∞—Ä–∏—Ç–µ–ª—å-2: @{userData.playerData.username}\n";
            }

            if (table.tableData.giverC_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverC_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üéÅ–î–∞—Ä–∏—Ç–µ–ª—å-3: @{userData.playerData.username}\n";
            }

            if (table.tableData.giverD_ID != null)
            {
                var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverD_ID),
                    WebManager.RequestType.GetUserData);
                tableInfo += userData.playerData.UserInfo(user.lang);
                //tableInfo += $"üéÅ–î–∞—Ä–∏—Ç–µ–ª—å-4: @{userData.playerData.username}\n";
            }

//TODO
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress)
                            }
                        });
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Back", callbackAddress)
                            }
                        });
                    break;
                }
                case "fr":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                            }
                        });
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                            }
                        });
                    break;
                }
            }

            var sentPhoto = await botClient.SendPhotoAsync(
                chatId,
                File.OpenRead(path)!,
                tableInfo,
                replyMarkup: inlineKeyboard);
        }
        else
        {
            InlineKeyboardMarkup? inlineKeyboard;
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–æ–ª–∞",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "You are no longer a member of the table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "fe":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Vous n'√™tes plus membre de la table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable")
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Sie sind kein Mitglied des Tisches mehr",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }
    }

    public static async void Warning(ITelegramBotClient botClient, long chatId, UserProfile user, Error error)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/status.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\status.png");
        var tableToBack = await WebManager.SendData(user, WebManager.RequestType.GetTableData);
        var callbackAddress = GetCallbackAddress(tableToBack.tableData.tableType);


        Message? sentMessage;
        switch (error)
        {
            case Error.UserIsNotExist:
            {
                switch (user.lang)
                {
                    case "ru":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress)
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑‚Äç‚ôÇÔ∏è –≠—Ç–æ—Ç –î–∞—Ä–∏—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "eng":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Back", callbackAddress)
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑‚Äç‚ôÇÔ∏è This Giver has not joined the game yet.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "fr":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", callbackAddress)
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑‚Äç‚ôÇÔ∏è Ce Donateur n'a pas encore rejoint le jeu.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "de":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress)
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑‚Äç‚ôÇÔ∏è Dieser Geber ist dem Spiel noch nicht beigetreten.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }

                break;
            }
            case Error.RefLinkInvalid:
                sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"RU: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞\n\n" +
                    $"ENG: Referral link is invalid\n\n" +
                    $"FR: Le lien de parrainage n'est pas valide\n\n" +
                    $"DE: Empfehlungslink ist ung√ºltig\n\n"
                );
                break;
            case Error.UserWithoutUsername:
                sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"RU: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –∏ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\n" +
                    $"ENG: Using a bot without a nickname is unfortunately not possible, please enter your Username in the Telegram account settings and re-follow the referral link\n\n" +
                    $"FR: L'utilisation d'un bot sans pseudonyme n'est malheureusement pas possible, veuillez entrer votre nom d'utilisateur dans les param√®tres du compte Telegram et suivre √† nouveau le lien de parrainage\n\n" +
                    $"DE: Die Verwendung eines Bots ohne Nickname ist leider nicht m√∂glich, bitte geben Sie Ihren Benutzernamen in den Telegram-Kontoeinstellungen ein und folgen Sie erneut dem Referral-Link\n\n"
                    );
                break;
        }
    }

    public static async void ConnectingError(ITelegramBotClient botClient, long chatId, UserProfile user, Error error)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/tableSelection.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\tableSelection.png");
        switch (error)
        {
            case Error.UserAlreadyAtAnotherTable:
                
                var tableData = await WebManager.SendData(user, WebManager.RequestType.GetTableData);
                Console.WriteLine(tableData.tableData.tableType);
                switch (user.lang)
                {
                    case "ru":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"ü§∑ –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–æ–ª–µ: {tableData.tableData.GetTableType(user)}.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "eng":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Back", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"ü§∑ You are already on the table: {tableData.tableData.GetTableType(user)}.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "fr":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"ü§∑ Vous √™tes d√©j√† sur la table: {tableData.tableData.GetTableType(user)}.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "de":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"ü§∑ Sie sind bereits auf dem Tisch: {tableData.tableData.GetTableType(user)}.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }

                break;
            case Error.UserDontMeetConnetionRequriments:
                switch (user.lang)
                {
                    case "ru":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑ –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –ò–õ–ò –ø—Ä–æ–π—Ç–∏ —Å—Ç–æ–ª —É—Ä–æ–≤–Ω–µ–º –Ω–∏–∂–µ.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "eng":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Back", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑ To open this table, you need to fulfill the conditions for invited players OR go through the table below.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "fr":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑ Pour ouvrir ce tableau, vous devez remplir les conditions des joueurs invit√©s OU passer par le tableau ci-dessous.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "de":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", "ChooseTable")
                                }
                            });

                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            "ü§∑ Um diese Tabelle zu √∂ffnen, m√ºssen Sie die Bedingungen f√ºr eingeladene Spieler erf√ºllen ODER die Tabelle unten durchgehen.",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }

                break;
        }
    }

    //MAIN MENU// DONE
    public static async void MainMenu(ITelegramBotClient botClient, long chatId, string lang)
    {
        string path = null;
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/mainMenu.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\mainMenu.png");
        Message? sentPhoto;
        switch (lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚öú –í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("üîñ –ú–æ–π —Å—Ç–∞—Ç—É—Å", "Status")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üìÑ –ò–Ω—Ñ–æ", "Info"),
                            InlineKeyboardButton.WithCallbackData("üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞", "RefLink")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üì≤ –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "TechSupport"),
                            InlineKeyboardButton.WithCallbackData("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "ChangeLang")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büóÇ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>" +
                    "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                    ParseMode.Html,
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚öú Choose the table", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("üîñ My status", "Status")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üìÑ Info", "Info"),
                            InlineKeyboardButton.WithCallbackData("üîó Refferal link", "RefLink")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üì≤ Tech Support", "TechSupport"),
                            InlineKeyboardButton.WithCallbackData("üåê Change language", "ChangeLang")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büóÇ Main Menu" +
                    "\n\nSelect the desired section:",
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚öú Choisissez le tableau", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("üîñ Mon statut", "Status")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üìÑ Info", "Info"),
                            InlineKeyboardButton.WithCallbackData("üîó Lien de r√©f√©rence", "RefLink")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üì≤ Soutien technique", "TechSupport"),
                            InlineKeyboardButton.WithCallbackData("üåê Changer de langue", "ChangeLang")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büóÇ Menu" +
                    "\n\nS√©lectionnez la rubrique souhait√©e:",
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚öú Tisch ausw√§hlen", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("üîñ Mein status", "Status")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üìÑ Die Info", "Info"),
                            InlineKeyboardButton.WithCallbackData("üîó Empfehlungslink", "RefLink")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üì≤ Technischer Support", "TechSupport"),
                            InlineKeyboardButton.WithCallbackData("üåê Sprache √§ndern", "ChangeLang")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büóÇ Das Menu" +
                    "\n\nW√§hlen Sie den gew√ºnschten Abschnitt aus:",
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    //STATUS// 
    public static async void Status(ITelegramBotClient botClient, long chatId, UserProfile userData)
    {
        string path = null;
        var tableData = await WebManager.SendData(userData, WebManager.RequestType.GetTableData);
        string tableType;
        string tableRole;
        var giverCount = 0;
        if (tableData.tableData.giverA_ID != null) giverCount++;
        if (tableData.tableData.giverB_ID != null) giverCount++;
        if (tableData.tableData.giverC_ID != null) giverCount++;
        if (tableData.tableData.giverD_ID != null) giverCount++;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/status.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\status.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        tableRole = userData.GetTableRole(userData.lang);
        userData.level_tableType = tableData.tableData.tableType.ToString();
        tableType = userData.GetTableType();
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üì£ –û–±—â–∏–π —á–∞—Ç", "https://t.me/cashflow_official_chat"),
                            InlineKeyboardButton.WithUrl("üí† –ö–∞–Ω–∞–ª", "https://t.me/original_cashflow")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuRU
                        }
                    });
                if (userData.table_id != null)
                {
                    if (userData.refId != null)
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"\n–í–∞—à ID: {userData.id}\n–í–∞—à –Ω–∏–∫: @{userData.username}\n–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å:\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                            $"\n\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{userData.invitedBy}\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {userData.invited}" +
                            $"\n–í–∞—à–∏ —Å—Ç–æ–ª—ã:\n\n{tableType} —Å—Ç–æ–ª " +
                            $"\n–í–∞—à–∞ —Ä–æ–ª—å: ({tableRole})\n–í—Å–µ–≥–æ –¥–∞—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–æ–ª–µ: {giverCount} –∏–∑ 4",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentPhoto = await botClient.SendPhotoAsync(
                            chatId,
                            File.OpenRead(path)!,
                            $"\n–í–∞—à ID: {userData.id}\n–í–∞—à –Ω–∏–∫: @{userData.username}\n–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å:\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                            $"\n\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{userData.invitedBy}\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {userData.invited}" +
                            $"\n–í–∞—à–∏ —Å—Ç–æ–ª—ã:\n\n{tableType} —Å—Ç–æ–ª " +
                            $"\n\n–í–∞—à–∞ —Ä–æ–ª—å: ({tableRole})\n–í—Å–µ–≥–æ –¥–∞—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–æ–ª–µ: {giverCount} –∏–∑ 4",
                            replyMarkup: inlineKeyboard);
                    }
                }
                else
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\n–í–∞—à ID: {userData.id}\n–í–∞—à –Ω–∏–∫: @{userData.username}\n–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å:\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                        $"\n\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{userData.invitedBy}\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {userData.invited}",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üì£ General chat", "https://t.me/cashflow_official_chat"),
                            InlineKeyboardButton.WithUrl("üí† Channel", "https://t.me/original_cashflow")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuENG
                        }
                    });

                if (userData.refId != null)
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\nYour ID: {userData.id}\nYour nickname: @{userData.username}\nFixed rate:\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                        $"\n\nInvited by: @{userData.invitedBy}\nYour Invites: {userData.invited}" +
                        $"\nYour tables:\n\n{tableType} table: ({tableRole})\nGivers on table: {giverCount} of 4",
                        replyMarkup: inlineKeyboard);
                }
                else
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\nYour ID: {userData.id}\nYour nickname: @{userData.username}\nFixed rate:\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                        $"\n\nYour Invites: {userData.invited}" +
                        $"\nYour tables:\n\n{tableType} table: ({tableRole})\nGivers on table: {giverCount} of 4",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üì£ Chat g√©n√©ral", "https://t.me/cashflow_official_chat"),
                            InlineKeyboardButton.WithUrl("üí† Le canal", "https://t.me/original_cashflow")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô Retour", "MainMenu")
                        }
                    });
                if (userData.refId != null)
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\nVotre identifiant: {userData.id}\nTon surnom: @{userData.username}\nTaux fixe :\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                        $"\n\nInviter par: @{userData.invitedBy}\nAuto-invit√©: {userData.invited}" +
                        $"\nVos tableaux:\n\n{tableType} table: ({tableRole})\nDonneurs sur table: {giverCount} sur 4",
                        replyMarkup: inlineKeyboard);
                }
                else
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        $"\nVotre identifiant: {userData.id}\nTon surnom: @{userData.username}\nTaux fixe :\nüìà 1$ = 0.98‚Ç¨ = 62‚ÇΩ" +
                        $"\n\nAuto-invit√©: {userData.invited}" +
                        $"\nVos tableaux:\n\n{tableType} table: ({tableRole})\nDonneurs sur table: {giverCount} sur 4",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üì£ Allgemeiner Chat", "https://t.me/cashflow_official_chat"),
                            InlineKeyboardButton.WithUrl("üí† Kanal)", "https://t.me/original_cashflow")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô Zur√ºck", "MainMenu")
                        }
                    });
                if (userData.refId != null)
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\nIhre ID: {userData.id}\nDein Spitzname: @{userData.username}\nFester Zinssatz:\n1$ = 62‚ÇΩ = 0.98‚Ç¨" +
                        $"\n\nDich eingeladen: @{userData.invitedBy}\nPers√∂nlich eingeladen: {userData.invited}" +
                        $"\nIhre Tische:\n\n{tableType} Tisch: ({tableRole})\nGesamtspender auf dem Tisch: {giverCount} von 4",
                        replyMarkup: inlineKeyboard);
                }
                else
                {
                    var sentPhoto = await botClient.SendPhotoAsync(
                        chatId,
                        File.OpenRead(path)!,
                        $"\nIhre ID: {userData.id}\nDein Spitzname: @{userData.username}\nFester Zinssatz:\n1$ = 62‚ÇΩ = 0.98‚Ç¨" +
                        $"\n\nPers√∂nlich eingeladen: {userData.invited}" +
                        $"\nIhre Tische:\n\n{tableType} Tisch: ({tableRole})\nGesamtspender auf dem Tisch: {giverCount} von 4",
                        replyMarkup: inlineKeyboard);
                }

                break;
        }
    }

    //REFFERAL LINK//Done   
    public static async void RefLink(ITelegramBotClient botClient, long chatId, UserProfile userData)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/refLink.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\refLink.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        Console.WriteLine("https://t.me/originalCashFlowbot?start=R" + userData.id);
        Message sentPhoto;
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButtonMainMenuRU
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:" +
                    "\n\nhttps://t.me/originalCashFlowbot?start=R" + userData.id,
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButtonMainMenuENG
                        }
                    });
                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büîó Your referral link:" +
                    "\n\nhttps://t.me/originalCashFlowbot?start=R" + userData.id,
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButtonMainMenuFR
                        }
                    });
                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büîó Votre lien de r√©f√©rence:" +
                    "\n\nhttps://t.me/originalCashFlowbot?start=R" + userData.id,
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButtonMainMenuDE
                        }
                    });
                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büîó Ihr Empfehlungslink:" +
                    "\n\nhttps://t.me/originalCashFlowbot?start=R" + userData.id,
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    //USER AGREEMENT//Done
    public static async void Agreement(ITelegramBotClient botClient, long chatId, UserProfile userData)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/agreement.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\agreement.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        Message sentPhoto;
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å", "https://telegra.ph/Opta-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚úÖ –Ø –ø—Ä–∏–Ω–∏–º–∞—é", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büìå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï" +
                    "\n\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–∫—Å—Ç–æ–º –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:",
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìñ Read", "https://telegra.ph/User-Agreement-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚úÖ I accept", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büìå User Agreement" +
                    "\nBefore starting the game, the user undertakes to read the text of this agreement:",
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìñ Lire", "https://telegra.ph/Conditions-dutilisation-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚úÖ J'accepte", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büìå Conditions d'utilisation" +
                    "\nAvant de commencer le jeu, l'utilisateur s'engage √† lire le texte de cet accord:",
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìñ Lesen", "https://telegra.ph/Benutzervereinbarung-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("‚úÖ Ich akzeptiere", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büìå Benutzervereinbarung" +
                    "\nVor Spielbeginn verpflichtet sich der Nutzer, den Text dieser Vereinbarung zu lesen:",
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    //TECH SUPPORT // Done
    public static async void TechSupport(ITelegramBotClient botClient, long chatId, UserProfile userData)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/techSupport.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\techSupport.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        Message sentPhoto;
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá¨üáß English", "https://t.me/CF_Support_EN"),
                            InlineKeyboardButton.WithUrl("üá´üá∑ Fran√ßais", "https://t.me/CF_Support_FR")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "https://t.me/CF_Support_RU"),
                            InlineKeyboardButton.WithUrl("üá©üá™ Deutsch", "https://t.me/CF_Support_DE")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuRU
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büì≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞" +
                    "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç:",
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá¨üáß English", "https://t.me/CF_Support_EN"),
                            InlineKeyboardButton.WithUrl("üá´üá∑ Fran√ßais", "https://t.me/CF_Support_FR")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "https://t.me/CF_Support_RU"),
                            InlineKeyboardButton.WithUrl("üá©üá™ Deutsch", "https://t.me/CF_Support_DE")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuENG
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büì≤ Tech support" +
                    "\n\nSelect the language of those. support and click to open chat:",
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá¨üáß English", "https://t.me/CF_Support_EN"),
                            InlineKeyboardButton.WithUrl("üá´üá∑ Fran√ßais", "https://t.me/CF_Support_FR")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "https://t.me/CF_Support_RU"),
                            InlineKeyboardButton.WithUrl("üá©üá™ Deutsch", "https://t.me/CF_Support_DE")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô Retour", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büì≤ Support technique" +
                    "\n\nS√©lectionnez la langue de ceux-ci. support et cliquez pour ouvrir le chat :",
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("English üá¨üáß", "https://t.me/CF_Support_EN"),
                            InlineKeyboardButton.WithUrl("Fran√ßais üá´üá∑", "https://t.me/CF_Support_FR")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("–†—É—Å—Å–∫–∏–π üá∑üá∫", "https://t.me/CF_Support_RU"),
                            InlineKeyboardButton.WithUrl("Deutsch üá©üá™", "https://t.me/CF_Support_DE")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büì≤ Technischer Support" +
                    "\n\nW√§hlen Sie die Sprache dieser aus. Support und zum √ñffnen des Chats klicken:",
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    //BOT INFO// needed to be updated with couple of staff
    public static async void Info(ITelegramBotClient botClient, long chatId, UserProfile userData)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/info.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\info.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        Message sentPhoto;
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                                "https://telegra.ph/Opta-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìç –ü—Ä–∞–≤–∏–ª–∞ CASH FLOW",
                                "https://telegra.ph/Pravila-Cash-Flow-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("‚öú –°—Ç–æ–ª—ã", "https://telegra.ph/Stoly-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üë• –†–æ–ª–∏", "https://telegra.ph/Roli-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå –£—Å–ª–æ–≤–∏—è —Å—Ç–æ–ª–æ–≤",
                                "https://telegra.ph/Usloviya-stolov-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuRU
                        }
                    });
                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\büìÑ –ò–Ω—Ñ–æ" +
                    "\n\n–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ CASH FLOW:",
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå User Agreement", "https://telegra.ph/User-Agreement-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìç Cash Flow Rules",
                                "https://telegra.ph/Cash-Flow-Rules-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("‚öú Cash Flow tables", "https://telegra.ph/Tables-07-21-2")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üë• Roles", "https://telegra.ph/Roles-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå Table conditions",
                                "https://telegra.ph/Cash-Flow-tables-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButtonMainMenuENG
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\bInfo" +
                    "\nThis section contains the necessary information about the CASH FLOW game:",
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå Conditions d'utilisation",
                                "https://telegra.ph/Conditions-dutilisation-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìç R√®gles de tr√©sorerie",
                                "https://telegra.ph/Cash-Flow-r%C3%A8gles-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("‚öú Tableaux des flux de tr√©sorerie",
                                "https://telegra.ph/Les-tables-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üë• R√îLE ", "https://telegra.ph/R%C3%94LE-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå Conditions du tableau",
                                "https://telegra.ph/Cash-Flow-tableaux-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\bInfo" +
                    "\nCette section contient les informations n√©cessaires sur le jeu CASH FLOW :",
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå Benutzervereinbarung",
                                "https://telegra.ph/Benutzervereinbarung-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìç Cashflow-Regeln",
                                "https://telegra.ph/Cashflow-Regeln-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("‚öú Cashflow-Tabellen", "https://telegra.ph/Tische-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üë• Rollen", "https://telegra.ph/3-ROLLEN-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithUrl("üìå Tabellenbedingungen",
                                "https://telegra.ph/Cashflow-Tabellen-07-21")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üîô Zur√ºck", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\bInfo" +
                    "\nDieser Abschnitt enth√§lt die notwendigen Informationen zum Spiel CASH FLOW:",
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    //TABLE MENU//
    public static async void TableMenu(ITelegramBotClient botClient, long chatId,
        UserProfile userData)
    {
        string path = null;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images/MainMenu/tableSelection.png");

        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            path = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location),
                @"Images\MainMenu\tableSelection.png");
        InlineKeyboardMarkup? inlineKeyboard;
        Message? sentMessage;
        Message sentPhoto;
        switch (userData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéó –ú–µ–¥–Ω—ã–π —Å—Ç–æ–ª", "CopperTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç–æ–ª", "BronzeTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—Ç–æ–ª", "SilverTable")
                        }, 
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ–π —Å—Ç–æ–ª", "GoldTable")
                    }, /*
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π —Å—Ç–æ–ª", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé –ê–ª–º–∞–∑–Ω—ã–π —Å—Ç–æ–ª", "DiamondTable")
                    },*/
                        new[]
                        {
                            InlineKeyboardButtonMainMenuRU
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\b‚öú –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤" +
                    "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏:",
                    replyMarkup: inlineKeyboard);
                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéó Copper table", "CopperTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•â Bronze table", "BronzeTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•à Silver table", "SilverTable")
                        }, 
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á Gold table", "GoldTable")
                    },/*
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ Platinum table", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé Diamond table", "DiamondTable")
                    },*/
                        new[]
                        {
                            InlineKeyboardButtonMainMenuENG
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\b‚öú List of tables" +
                    "\n\nSelect the table you want to join:",
                    replyMarkup: inlineKeyboard);
                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéó Table en cuivre", "CopperTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•â Table en bronze", "BronzeTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•à Table d'argent", "SilverTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•á Tableau dor√©", "GoldTable")
                        },/*
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéñ Table de platine", "PlatinumTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üíé Tableau de diamant", "DiamondTable")
                        },*/
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\b‚öú Liste des tableaux" +
                    "\n\nS√©lectionnez la table que vous souhaitez rejoindre :",
                    replyMarkup: inlineKeyboard);
                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéó kupfer Tisch", "CopperTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•â bronze Tisch", "BronzeTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•à silberner Tisch", "SilverTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("ü•á goldener Tisch", "GoldTable")
                        },/*
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üéñ platin Tisch", "PlatinumTable")
                        },
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("üíé diamant Tisch", "DiamondTable")
                        },*/
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                        }
                    });

                sentPhoto = await botClient.SendPhotoAsync(
                    chatId,
                    File.OpenRead(path)!,
                    "\b‚öú Tabellenverzeichnis" +
                    "\n\nW√§hlen Sie den Tisch aus, dem Sie beitreten m√∂chten:",
                    replyMarkup: inlineKeyboard);
                break;
        }
    }

    public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
        UserData userData, Table.TableType tableType)
    {
        InlineKeyboardMarkup inlineKeyboard;
        switch (userData.playerData.lang)
        {
            case "ru":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("–î–∞", "Open" + callbackData.Data)
                        }
                    });
                if (userData.playerData.tableRole == "giver")
                {
                    switch (tableType)
                    {
                        case Table.TableType.copper:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 100$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.bronze:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 400$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.silver:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 1000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.gold:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 2500$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.platinum:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 5000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.diamond:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 10000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                    }
                }
                else
                {
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "eng":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("Yes", "Open" + callbackData.Data)
                        }
                    });
                if (userData.playerData.tableRole == "giver")
                {
                    switch (tableType)
                    {
                        case Table.TableType.copper:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $100\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.bronze:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $400\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.silver:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $1000\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.gold:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $2500\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.platinum:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $5000\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.diamond:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "On this table you need to make a gift of $10000\nAre you sure you want to go to this table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                    }
                }
                else
                {
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Are you sure you want to join this table?",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "fr":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("Oui", "Open" + callbackData.Data)
                        }
                    });

                if (userData.playerData.tableRole == "giver")
                {
                    switch (tableType)
                    {
                        case Table.TableType.copper:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 100$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.bronze:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 400$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.silver:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 1000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.gold:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 2500$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.platinum:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 5000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.diamond:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "Sur cette table, vous devez faire un don de 10000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                    }
                }
                else
                {
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "√ätes-vous s√ªr de vouloir rejoindre cette table?",
                        replyMarkup: inlineKeyboard);
                }

                break;
            case "de":
                inlineKeyboard = new InlineKeyboardMarkup(
                    new[]
                    {
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                            InlineKeyboardButton.WithCallbackData("JA", "Open" + callbackData.Data)
                        }
                    });
                if (userData.playerData.tableRole == "giver")
                {
                    switch (tableType)
                    {
                        case Table.TableType.copper:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 100$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.bronze:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 400$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.silver:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 1000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.gold:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 2500$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.platinum:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 5000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                        case Table.TableType.diamond:
                        {
                            var sentMessage = await botClient.SendTextMessageAsync(
                                chatId,
                                "An diesem Tisch m√ºssen Sie 10000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                                replyMarkup: inlineKeyboard);
                            break;
                        }
                    }
                }
                else
                {
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        "Sind Sie sicher, dass Sie an diesem Tisch teilnehmen m√∂chten?",
                        replyMarkup: inlineKeyboard);
                }

                break;
        }
    }

    public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
        UserProfile userData,
        WebManager.RequestType requestType)
    {
        switch (requestType)
        {
            case WebManager.RequestType.LeaveTable:
            {
                InlineKeyboardMarkup? inlineKeyboard;
                Message sentMessage;
                switch (userData.lang)
                {
                    case "ru":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "eng":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Are you sure you want to leave this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "fr":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "√ätes-vous s√ªr de vouloir quitter cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "de":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "M√∂chten Sie diesen Tisch wirklich verlassen?",
                            replyMarkup: inlineKeyboard);
                        break;
                }

                break;
            }
            case WebManager.RequestType.RemoveFromTable:
            {
                Message sentMessage;
                InlineKeyboardMarkup inlineKeyboard;
                switch (userData.lang)
                {
                    case "ru":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–æ–ª–∞?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "eng":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Are you sure you want to remove this user from the table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "fr":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Oui", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Voulez-vous vraiment supprimer cet utilisateur du tableau?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "de":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "M√∂chten Sie diesen Benutzer wirklich aus der Tabelle entfernen?",
                            replyMarkup: inlineKeyboard);
                        break;
                }

                break;
            }
            case WebManager.RequestType.Confirm:
            {
                InlineKeyboardMarkup inlineKeyboard;
                Message? sentMessage;
                switch (userData.lang)
                {
                    case "ru":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "eng":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Are you sure you want to confirm the payment from this user?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "fr":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("Oui", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "Voulez-vous vraiment confirmer le paiement de cet utilisateur?",
                            replyMarkup: inlineKeyboard);
                        break;
                    case "de":
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                    InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                                }
                            });
                        sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            "M√∂chten Sie die Zahlung von diesem Nutzer wirklich best√§tigen?",
                            replyMarkup: inlineKeyboard);
                        break;
                }

                break;
            }
        }
    }
}