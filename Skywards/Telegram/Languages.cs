using CashFlowTelegramBot.Skywards.Web;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

namespace CashFlowTelegramBot.Skywards.Telegram;

public partial class Languages
{
    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuRU =
        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuENG =
        InlineKeyboardButton.WithCallbackData("Back", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuFR =
        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu");

    public static readonly InlineKeyboardButton InlineKeyboardButtonMainMenuDE =
        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu");

    public static async void LanguageMenu(ITelegramBotClient botClient, long chatId)
    {
        var inlineKeyboard = new InlineKeyboardMarkup(
            // keyboard
            new[]
            {
                // first row
                new[]
                {
                    // first button in row
                    InlineKeyboardButton.WithCallbackData("English üá¨üáß", "ChangeToENG"),
                    // second button in row
                    InlineKeyboardButton.WithCallbackData("Fran√ßais üá´üá∑", "ChangeToFR")
                },
                // second row
                new[]
                {
                    // first button in row
                    InlineKeyboardButton.WithCallbackData("–†—É—Å—Å–∫–∏–π üá∑üá∫", "ChangeToRU"),
                    // second button in a row
                    InlineKeyboardButton.WithCallbackData("Deutsch üá©üá™", "ChangeToDE")
                }
            });

        var sentMessage = await botClient.SendTextMessageAsync(
            chatId,
            $"Language menu",
            replyMarkup: inlineKeyboard);
    }

    public static async void RegLanguageMenu(ITelegramBotClient botClient, long chatId)
    {
        var inlineKeyboard = new InlineKeyboardMarkup(
            new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("English üá¨üáß", "Reg_ENG"),
                    InlineKeyboardButton.WithCallbackData("Fran√ßais üá´üá∑", "Reg_FR")
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("–†—É—Å—Å–∫–∏–π üá∑üá∫", "Reg_RU"),
                    InlineKeyboardButton.WithCallbackData("Deutsch üá©üá™", "Reg_DE")
                }
            });

        var sentMessage = await botClient.SendTextMessageAsync(
            chatId,
            $"Language menu",
            replyMarkup: inlineKeyboard);
    }

    public static async void GetUserData(ITelegramBotClient botClient, long chatId, string lang,
        UserProfile SearchedUser,
        Table.TableRole tableRole)
    {
        UserData invitedBy = null;
        if (SearchedUser.refId != null)
        {
            invitedBy = await WebManager.SendData(new UserProfile((int) SearchedUser.refId),
                WebManager.RequestType.GetUserData);
        }

        var tableToBack = await WebManager.SendData(SearchedUser, WebManager.RequestType.GetTableData);
        if (tableToBack.tableData.tableID != 0)
        {
            var callbackAddress = "";
            switch (tableToBack.tableData.tableType)
            {
                case Table.TableType.copper:
                    callbackAddress = "OpenCopperTable";
                    break;
                case Table.TableType.bronze:
                    callbackAddress = "OpenBronzeTable";
                    break;
                case Table.TableType.silver:
                    callbackAddress = "OpenSilverTable";
                    break;
                case Table.TableType.gold:
                    callbackAddress = "OpenGoldTable";
                    break;
                case Table.TableType.platinum:
                    callbackAddress = "OpenPlatinumTable";
                    break;
                case Table.TableType.diamond:
                    callbackAddress = "OpenDiamondTable";
                    break;
            }

            InlineKeyboardMarkup? inlineKeyboard = null;
            bool flag = false;
            switch (lang)
            {
                case "ru":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "manager")
                    {
                        if (tableToBack.tableData.managerA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerARU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.managerB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerBRU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverARU,
                                        Tables.InlineKeyboardButtonVerfGiverARU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverBRU,
                                        Tables.InlineKeyboardButtonVerfGiverBRU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverCRU,
                                        Tables.InlineKeyboardButtonVerfGiverCRU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverDRU,
                                        Tables.InlineKeyboardButtonVerfGiverDRU
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (!flag)
                    {
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                }
                            });
                    }

                    if (invitedBy != null)
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n" +
                            $"–†–æ–ª—å: {SearchedUser.tableRole}\n" +
                            $"–ù–∏–∫: @{SearchedUser.username}\n" +
                            $"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: @{invitedBy.playerData.username}\n" +
                            $"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {SearchedUser.invited}" +
                            $"\n\n–°–≤—è–∑–∞—Ç—å—Å—è c @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n" +
                            $"–†–æ–ª—å: {SearchedUser.tableRole}\n" +
                            $"–ù–∏–∫: @{SearchedUser.username}\n" +
                            $"–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {SearchedUser.invited}" +
                            $"\n\n–°–≤—è–∑–∞—Ç—å—Å—è c @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "eng":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "manager")
                    {
                        if (tableToBack.tableData.managerA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerAENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.managerB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerBENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverAENG,
                                        Tables.InlineKeyboardButtonVerfGiverAENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverBENG,
                                        Tables.InlineKeyboardButtonVerfGiverBENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverCENG,
                                        Tables.InlineKeyboardButtonVerfGiverCENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverDENG,
                                        Tables.InlineKeyboardButtonVerfGiverDENG
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (!flag)
                    {
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                }
                            });
                    }

                    if (invitedBy != null)
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"User info\n\n" +
                            $"Role: {SearchedUser.tableRole}\n" +
                            $"Nickname: @{SearchedUser.username}\n" +
                            $"Invited by: @{invitedBy.playerData.username}\n" +
                            $"Personally invited: {SearchedUser.invited}" +
                            $"\n\nContact with @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"User info\n\n" +
                            $"Role: {SearchedUser.tableRole}\n" +
                            $"Nickname: @{SearchedUser.username}\n" +
                            $"Personally invited: {SearchedUser.invited}" +
                            $"\n\nContact with @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "fr":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "manager")
                    {
                        if (tableToBack.tableData.managerA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerAFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.managerB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerBFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverAFR,
                                        Tables.InlineKeyboardButtonVerfGiverAFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverBFR,
                                        Tables.InlineKeyboardButtonVerfGiverBFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverCFR,
                                        Tables.InlineKeyboardButtonVerfGiverCFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverDFR,
                                        Tables.InlineKeyboardButtonVerfGiverDFR
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (!flag)
                    {
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                }
                            });
                    }

                    if (invitedBy != null)
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Informations de l'utilisateur\n\n" +
                            $"R√¥le: {SearchedUser.tableRole}\n" +
                            $"Surnom: @{SearchedUser.username}\n" +
                            $"inviter par: @{invitedBy.playerData.username}\n" +
                            $"invit√© personnellement: {SearchedUser.invited}" +
                            $"\n\nContacter avec @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Informations de l'utilisateur\n\n" +
                            $"R√¥le: {SearchedUser.tableRole}\n" +
                            $"Surnom: @{SearchedUser.username}\n" +
                            $"invit√© personnellement: {SearchedUser.invited}" +
                            $"\n\nContacter avec @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
                case "de":
                {
                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "manager")
                    {
                        if (tableToBack.tableData.managerA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerADE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.managerB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableManagerBDE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (tableRole == Table.TableRole.banker && SearchedUser.tableRole == "giver")
                    {
                        if (tableToBack.tableData.giverA_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverADE,
                                        Tables.InlineKeyboardButtonVerfGiverADE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverB_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverBDE,
                                        Tables.InlineKeyboardButtonVerfGiverBDE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverC_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverCDE,
                                        Tables.InlineKeyboardButtonVerfGiverCDE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }

                        if (tableToBack.tableData.giverD_ID == SearchedUser.id && !flag)
                        {
                            inlineKeyboard = new InlineKeyboardMarkup(
                                new[]
                                {
                                    new[]
                                    {
                                        Tables.InlineKeyboardButtonRemoveFromTableGiverDDE,
                                        Tables.InlineKeyboardButtonVerfGiverDDE
                                    },
                                    new[]
                                    {
                                        InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                    }
                                });
                            flag = true;
                        }
                    }

                    if (!flag)
                    {
                        inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                }
                            });
                    }

                    if (invitedBy != null)
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Benutzerinformation\n\n" +
                            $"Rolle: {SearchedUser.tableRole}\n" +
                            $"Spitzname: @{SearchedUser.username}\n" +
                            $"ingeladen von: @{invitedBy.playerData.username}\n" +
                            $"Pers√∂nlich eingeladen: {SearchedUser.invited}" +
                            $"\n\nKontakt mit @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }
                    else
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Benutzerinformation\n\n" +
                            $"Rolle: {SearchedUser.tableRole}\n" +
                            $"Spitzname: @{SearchedUser.username}\n" +
                            $"Pers√∂nlich eingeladen: {SearchedUser.invited}" +
                            $"\n\nKontakt mit @{SearchedUser.username}",
                            replyMarkup: inlineKeyboard);
                    }

                    break;
                }
            }
        }
        else
        {
            InlineKeyboardMarkup? inlineKeyboard;
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–æ–ª–∞",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"You are no longer a member of the table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "fe":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Vous n'√™tes plus membre de la table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Sie sind kein Mitglied des Tisches mehr",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }
    }

    public static async void ShowListTeam(ITelegramBotClient botClient, long chatId, string lang, UserProfile user)
    {
        var table = await WebManager.SendData(user, WebManager.RequestType.GetTableData);
        if (table.tableData.tableID != 0)
        {
            var callbackAddress = "";
            switch (table.tableData.tableType)
            {
                case Table.TableType.copper:
                    callbackAddress = "OpenCopperTable";
                    break;
                case Table.TableType.bronze:
                    callbackAddress = "OpenBronzeTable";
                    break;
                case Table.TableType.silver:
                    callbackAddress = "OpenSilverTable";
                    break;
                case Table.TableType.gold:
                    callbackAddress = "OpenGoldTable";
                    break;
                case Table.TableType.platinum:
                    callbackAddress = "OpenPlatinumTable";
                    break;
                case Table.TableType.diamond:
                    callbackAddress = "OpenDiamondTable";
                    break;
            }

            var tableInfo = "";
            InlineKeyboardMarkup? inlineKeyboard;
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                            }
                        });
                    if (table.tableData.bankerID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.bankerID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–ë–∞–Ω–∫–∏—Ä: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–ú–µ–Ω–µ–¥–∂–µ—Ä-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–ú–µ–Ω–µ–¥–∂–µ—Ä-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–î–∞—Ä–∏—Ç–µ–ª—å-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–î–∞—Ä–∏—Ç–µ–ª—å-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverC_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverC_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–î–∞—Ä–∏—Ç–µ–ª—å-3: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverD_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverD_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"–î–∞—Ä–∏—Ç–µ–ª—å-4: @{userData.playerData.username}\n";
                    }

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        tableInfo,
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                            }
                        });
                    if (table.tableData.bankerID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.bankerID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Banker: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Manager-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Manager-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Giver-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Giver-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverC_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverC_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Giver-3: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverD_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverD_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Giver-4: @{userData.playerData.username}\n";
                    }

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        tableInfo,
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "fr":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                            }
                        });
                    if (table.tableData.bankerID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.bankerID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Banquier: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Gestionnaire-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Gestionnaire-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Donateur-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Donateur-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverC_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverC_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Donateur-3: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverD_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverD_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Donateur-4: @{userData.playerData.username}\n";
                    }

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        tableInfo,
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                            }
                        });
                    if (table.tableData.bankerID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.bankerID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Banker: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Manager-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.managerB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.managerB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Manager-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverA_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverA_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Geber-1: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverB_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverB_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Geber-2: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverC_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverC_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Geber-3: @{userData.playerData.username}\n";
                    }

                    if (table.tableData.giverD_ID != null)
                    {
                        var userData = await WebManager.SendData(new UserProfile((int) table.tableData.giverD_ID),
                            WebManager.RequestType.GetUserData);
                        tableInfo += $"Geber-4: @{userData.playerData.username}\n";
                    }

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        tableInfo,
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }
        else
        {
            InlineKeyboardMarkup? inlineKeyboard;
            switch (lang)
            {
                case "ru":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–æ–ª–∞",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "eng":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"You are no longer a member of the table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "fe":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Vous n'√™tes plus membre de la table",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case "de":
                {
                    inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("Ok", "ChooseTable"),
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Sie sind kein Mitglied des Tisches mehr",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }
    }

    public static async void Warning(ITelegramBotClient botClient, long chatId, UserProfile user, Error error)
    {
        var tableToBack = await WebManager.SendData(user, WebManager.RequestType.GetTableData);
        var callbackAddress = "";
        switch (tableToBack.tableData.tableType)
        {
            case Table.TableType.copper:
                callbackAddress = "OpenCopperTable";
                break;
            case Table.TableType.bronze:
                callbackAddress = "OpenBronzeTable";
                break;
            case Table.TableType.silver:
                callbackAddress = "OpenSilverTable";
                break;
            case Table.TableType.gold:
                callbackAddress = "OpenGoldTable";
                break;
            case Table.TableType.platinum:
                callbackAddress = "OpenPlatinumTable";
                break;
            case Table.TableType.diamond:
                callbackAddress = "OpenDiamondTable";
                break;
        }

        switch (error)
        {
            case Error.UserIsNotExist:
            {
                switch (user.lang)
                {
                    case "ru":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("–ù–∞–∑–∞–¥", callbackAddress),
                                }
                            });

                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—à—ë–ª –Ω–∞ –¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "eng":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Back", callbackAddress),
                                }
                            });

                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"The user has not entered this position yet",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "fr":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Retour", callbackAddress),
                                }
                            });

                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"L'utilisateur n'a pas encore entr√© cette position",
                            replyMarkup: inlineKeyboard);
                        break;
                    }

                    case "de":
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(
                            new[]
                            {
                                new[]
                                {
                                    InlineKeyboardButton.WithCallbackData("Zur√ºck", callbackAddress),
                                }
                            });

                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Der Benutzer hat diese Position noch nicht eingegeben",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }

                break;
            }
        }
    }

    public static async void Warning(ITelegramBotClient botClient, long chatId, UserProfile user,
        WebManager.RequestType error)
    {
    }

    public class Russian
    {
        public static async void MainMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("–°—Ç–∞—Ç—É—Å", "Status")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–ò–Ω—Ñ–æ", "Info"),
                        InlineKeyboardButton.WithCallbackData("–†–µ—Ñ. —Å—Å—ã–ª–∫–∞", "RefLink")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "TechSupport"),
                        InlineKeyboardButton.WithCallbackData("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "ChangeLang")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"–ú–µ–Ω—é",
                replyMarkup: inlineKeyboard);
        }

        public static async void Status(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–û–±—â–∏–π —á–∞—Ç", "https://t.me/cashflow_official_chat"),
                        InlineKeyboardButton.WithUrl("–ö–∞–Ω–∞–ª", "https://t.me/original_cashflow")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuRU
                    }
                });
            if (userData.refId != null)
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\n–í–∞—à ID: " + userData.id + "\n–í–∞—à –Ω–∏–∫: @" + userData.username +
                    "\n\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @" + userData.invitedBy + "\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\n–í–∞—à ID: " + userData.id + "\n–í–∞—à –Ω–∏–∫: @" + userData.username +
                    "\n\n–õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void RefLink(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButtonMainMenuRU
                    }
                });
            Console.WriteLine("https://t.me/originalCashFlowbot?start=R" + userData.id);
            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/originalCashFlowbot?start=R" + userData.id,
                replyMarkup: inlineKeyboard);
        }

        public static async void Agreement(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–°–æ–≥–ª–∞—à–µ–Ω–∏–µ", "https://telegra.ph/Opta-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–°–æ–≥–ª–∞—Å–∏–µ", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                replyMarkup: inlineKeyboard);
        }

        public static async void TechSupport(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("English üá¨üáß", "https://t.me/CF_Support_EN"),
                        InlineKeyboardButton.WithUrl("Fran√ßais üá´üá∑", "https://t.me/CF_Support_FR")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–†—É—Å—Å–∫–∏–π üá∑üá∫", "https://t.me/CF_Support_RU"),
                        InlineKeyboardButton.WithUrl("Deutsch üá©üá™", "https://t.me/CF_Support_DE")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuRU
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                replyMarkup: inlineKeyboard);
        }

        public static async void Info(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "https://telegra.ph/Opta-07-21"),
                        InlineKeyboardButton.WithUrl("üìå –ü—Ä–∞–≤–∏–ª–∞ Cash Flow",
                            "https://telegra.ph/Pravila-Cash-Flow-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå –°—Ç–æ–ª—ã", "https://telegra.ph/Stoly-07-21"),
                        InlineKeyboardButton.WithUrl("üìå –†–æ–ª–∏", "https://telegra.ph/Roli-07-21"),
                        InlineKeyboardButton.WithUrl("üìå –£—Å–ª–æ–≤–∏—è —Å—Ç–æ–ª–æ–≤", "https://telegra.ph/Usloviya-stolov-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuRU
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"–ò–Ω—Ñ–æ",
                replyMarkup: inlineKeyboard);
        }

        public static async void TableMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéó –ú–µ–¥–Ω—ã–π —Å—Ç–æ–ª", "CopperTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç–æ–ª", "BronzeTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—Ç–æ–ª", "SilverTable")
                    }, /*
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ–π —Å—Ç–æ–ª", "GoldTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π —Å—Ç–æ–ª", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé –ê–ª–º–∞–∑–Ω—ã–π —Å—Ç–æ–ª", "DiamondTable")
                    },*/
                    new[]
                    {
                        InlineKeyboardButtonMainMenuRU
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª",
                replyMarkup: inlineKeyboard);
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            UserData userData, Table.TableType tableType)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("–î–∞", "Open" + callbackData.Data)
                    }
                });
            if (userData.playerData.tableRole == "giver")
            {
                switch (tableType)
                {
                    case Table.TableType.copper:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 100$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.bronze:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 400$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.silver:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 1000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.gold:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 2500$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.platinum:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 5000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.diamond:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"–ù–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ 10000$\n–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            WebManager.RequestType requestType)
        {
            switch (requestType)
            {
                case WebManager.RequestType.LeaveTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–π —Å—Ç–æ–ª?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.RemoveFromTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–æ–ª–∞?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.Confirm:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("–ù–µ—Ç", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("–î–∞", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }

        public class TablesRU : Tables
        {
            public static async void Copper(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "copper";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.copper, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Bronze(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "bronze";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Silver(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "silver";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.silver, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Gold(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "gold";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.gold, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Platinum(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "platinum";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Diamond(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "diamond";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableRU
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∏—Ö —Å—Ç–æ–ª–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        replyMarkup: inlineKeyboard);
                }
            }
        }
    }

    public class English
    {
        public static async void MainMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Choose table", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("Status", "Status")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Info", "Info"),
                        InlineKeyboardButton.WithCallbackData("Referral link", "RefLink")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Tech support", "TechSupport"),
                        InlineKeyboardButton.WithCallbackData("Change language", "ChangeLang")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "Menu",
                replyMarkup: inlineKeyboard);
        }

        public static async void Status(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("General chat", "https://t.me/cashflow_official_chat"),
                        InlineKeyboardButton.WithUrl("Channel", "https://t.me/original_cashflow")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuENG
                    }
                });
            if (userData.refId != null)
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nYour ID: " + userData.id + "\nYour ID: @" + userData.username +
                    "\n\nYou invited by: @" + userData.invitedBy + "\nInvited by you: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nYour ID: " + userData.id + "\nYour ID: @" + userData.username +
                    "\n\nInvited by you: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void RefLink(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButtonMainMenuENG
                    }
                });
            Console.WriteLine("https://t.me/originalCashFlowbot?start=R" + userData.id);
            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Your referral link: https://t.me/originalCashFlowbot?start=R" + userData.id,
                replyMarkup: inlineKeyboard);
        }

        public static async void Agreement(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("Agreement", "https://telegra.ph/User-Agreement-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Agree", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"üìå User Agreement",
                replyMarkup: inlineKeyboard);
        }

        public static async void TechSupport(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("English üá¨üáß", "https://t.me/CF_Support_EN"),
                        InlineKeyboardButton.WithUrl("Fran√ßais üá´üá∑", "https://t.me/CF_Support_FR")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–†—É—Å—Å–∫–∏–π üá∑üá∫", "https://t.me/CF_Support_RU"),
                        InlineKeyboardButton.WithUrl("Deutsch üá©üá™", "https://t.me/CF_Support_DE")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuENG
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Tech support",
                replyMarkup: inlineKeyboard);
        }

        public static async void Info(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå User Agreement", "https://telegra.ph/User-Agreement-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Cash Flow Rules", "https://telegra.ph/Cash-Flow-Rules-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå Cash Flow tables", "https://telegra.ph/Tables-07-21-2"),
                        InlineKeyboardButton.WithUrl("üìå Roles", "https://telegra.ph/Roles-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Table conditions", "https://telegra.ph/Cash-Flow-tables-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButtonMainMenuENG
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Info",
                replyMarkup: inlineKeyboard);
        }

        public static async void TableMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéó Copper table", "CopperTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•â Bronze table", "BronzeTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•à Silver table", "SilverTable")
                    }, /*
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á Gold table", "GoldTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ Platinum table", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé Diamond table", "DiamondTable")
                    },*/
                    new[]
                    {
                        InlineKeyboardButtonMainMenuENG
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "Choose a table",
                replyMarkup: inlineKeyboard);
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            UserData userData, Table.TableType tableType)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("Yes", "Open" + callbackData.Data)
                    }
                });
            if (userData.playerData.tableRole == "giver")
            {
                switch (tableType)
                {
                    case Table.TableType.copper:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $100\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.bronze:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $400\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.silver:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $1000\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.gold:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $2500\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.platinum:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $5000\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.diamond:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"On this table you need to make a gift of $10000\nAre you sure you want to go to this table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"Are you sure you want to join this table?",
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            WebManager.RequestType requestType)
        {
            switch (requestType)
            {
                case WebManager.RequestType.LeaveTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Are you sure you want to leave this table?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.RemoveFromTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Are you sure you want to remove this user from the table?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.Confirm:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("No", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Yes", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Are you sure you want to confirm the payment from this user?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }

        public class TablesENG : Tables
        {
            public static async void Copper(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "copper";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.copper, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Bronze(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "bronze";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Silver(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "silver";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.silver, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                TablesENG.InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Gold(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "gold";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            TablesENG.Giver(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "manager":
                            TablesENG.Manager(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "banker":
                            TablesENG.Banker(botClient, chatId, Table.TableType.gold, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                TablesENG.InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Platinum(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "platinum";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Diamond(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "diamond";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            TablesENG.Giver(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "manager":
                            TablesENG.Manager(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "banker":
                            TablesENG.Banker(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                TablesENG.InlineKeyboardButtonChooseTableENG
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Unfortunately, there are no such tables yet, please try again later",
                        replyMarkup: inlineKeyboard);
                }
            }
        }
    }

    public class French
    {
        public static async void MainMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Choisissez le tableau", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("Statut", "Status")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Info", "Info"),
                        InlineKeyboardButton.WithCallbackData("Lien de r√©f√©rence", "RefLink")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Support technique", "TechSupport"),
                        InlineKeyboardButton.WithCallbackData("Changer de langue", "ChangeLang")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Menu",
                replyMarkup: inlineKeyboard);
        }

        public static async void Status(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("Chat g√©n√©ral", "https://t.me/cashflow_official_chat"),
                        InlineKeyboardButton.WithUrl("Le canal", "https://t.me/original_cashflow")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                    }
                });
            if (userData.refId != null)
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nVotre identifiant): " + userData.id + "\nTon surnom: @" +
                    userData.username + "\n\nVous √™tes invit√© par: @" + userData.invitedBy + "\nInvit√© par vous: " +
                    userData.invited,
                    replyMarkup: inlineKeyboard);
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nVotre identifiant: " + userData.id + "\nTon surnom:" + userData.username +
                    "\n\nVous √™tes invit√© par: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void RefLink(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                    }
                });
            Console.WriteLine("https://t.me/originalCashFlowbot?start=R" + userData.id);
            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"FR(Your referral link): https://t.me/originalCashFlowbot?start=R" + userData.id,
                replyMarkup: inlineKeyboard);
        }

        public static async void Agreement(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("Conditions d'utilisation",
                            "https://telegra.ph/Conditions-dutilisation-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Accepter", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"üìå Conditions d'utilisation",
                replyMarkup: inlineKeyboard);
        }

        public static async void TechSupport(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("English üá¨üáß", "https://t.me/CF_Support_EN"),
                        InlineKeyboardButton.WithUrl("Fran√ßais üá´üá∑", "https://t.me/CF_Support_FR")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–†—É—Å—Å–∫–∏–π üá∑üá∫", "https://t.me/CF_Support_RU"),
                        InlineKeyboardButton.WithUrl("Deutsch üá©üá™", "https://t.me/CF_Support_DE")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Support technique",
                replyMarkup: inlineKeyboard);
        }

        public static async void Info(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå Conditions d'utilisation",
                            "https://telegra.ph/Conditions-dutilisation-07-21"),
                        InlineKeyboardButton.WithUrl("üìå R√®gles de tr√©sorerie",
                            "https://telegra.ph/Cash-Flow-r%C3%A8gles-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå Tableaux des flux de tr√©sorerie",
                            "https://telegra.ph/Les-tables-07-21"),
                        InlineKeyboardButton.WithUrl("üìå R√îLE ", "https://telegra.ph/R%C3%94LE-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Conditions du tableau",
                            "https://telegra.ph/Cash-Flow-tableaux-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Info",
                replyMarkup: inlineKeyboard);
        }

        public static async void TableMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéó Table en cuivre", "CopperTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•â Table en bronze", "BronzeTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•à Table d'argent", "SilverTable")
                    },
                    /*new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á Tableau dor√©", "GoldTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ Table de platine", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé Tableau de diamant", "DiamondTable")
                    },*/
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Retour", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "Choisissez un tableau",
                replyMarkup: inlineKeyboard);
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            UserData userData, Table.TableType tableType)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("Oui", "Open" + callbackData.Data)
                    }
                });

            if (userData.playerData.tableRole == "giver")
            {
                switch (tableType)
                {
                    case Table.TableType.copper:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 100$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.bronze:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 400$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.silver:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 1000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.gold:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 2500$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.platinum:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 5000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.diamond:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"Sur cette table, vous devez faire un don de 10000$\n√ätes-vous s√ªr de vouloir aller √† cette table?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"√ätes-vous s√ªr de vouloir rejoindre cette table?",
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            WebManager.RequestType requestType)
        {
            switch (requestType)
            {
                case WebManager.RequestType.LeaveTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Oui", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"√ätes-vous s√ªr de vouloir quitter cette table?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.RemoveFromTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Oui", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Voulez-vous vraiment supprimer cet utilisateur du tableau?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.Confirm:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("no", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("Oui", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Voulez-vous vraiment confirmer le paiement de cet utilisateur?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }

        public class TablesFR : Tables
        {
            public static async void Copper(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "copper";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.copper, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Bronze(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "bronze";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Silver(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "silver";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.silver, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Gold(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "gold";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.gold, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Platinum(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "platinum";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Diamond(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "diamond";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableFR
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Malheureusement, il n'y a pas encore de telles tables, veuillez r√©essayer plus tard",
                        replyMarkup: inlineKeyboard);
                }
            }
        }
    }

    public class German
    {
        public static async void MainMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Tisch ausw√§hlen", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("Status", "Status")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Die Info", "Info"),
                        InlineKeyboardButton.WithCallbackData("Empfehlungslink", "RefLink")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Technischer Support", "TechSupport"),
                        InlineKeyboardButton.WithCallbackData("Sprache √§ndern", "ChangeLang")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "Speisekarte",
                replyMarkup: inlineKeyboard);
        }

        public static async void Status(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("Allgemeiner Chat", "https://t.me/cashflow_official_chat"),
                        InlineKeyboardButton.WithUrl("Kanal)", "https://t.me/original_cashflow")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                    }
                });
            //float exchangeRate = CurrencyConverter.GetExchangeRate("usd", "rub", 1f);
            //Console.WriteLine("\nexchangeRate " + exchangeRate);
            if (userData.refId != null)
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nIhre ID: " + userData.id + "\nDein Spitzname: @" + userData.username +
                    "\n\nDu hast eingeladen: @" + userData.invitedBy + "\nVon Ihnen eingeladen: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"1$ - 58‚ÇΩ - 0.98‚Ç¨" + "\nIhre ID: " + userData.id + "\nDein Spitzname: @" + userData.username +
                    "\n\nVon Ihnen eingeladen: " + userData.invited,
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void RefLink(ITelegramBotClient botClient, long chatId, UserProfile userData)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                    }
                });
            Console.WriteLine("https://t.me/originalCashFlowbot?start=R" + userData.id);
            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"DE(Your referral link): https://t.me/originalCashFlowbot?start=R" + userData.id,
                replyMarkup: inlineKeyboard);
        }

        public static async void Agreement(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("Benutzervereinbarung",
                            "https://telegra.ph/Benutzervereinbarung-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Einverstanden", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"üìå Benutzervereinbarung",
                replyMarkup: inlineKeyboard);
        }

        public static async void TechSupport(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("English üá¨üáß", "https://t.me/CF_Support_EN"),
                        InlineKeyboardButton.WithUrl("Fran√ßais üá´üá∑", "https://t.me/CF_Support_FR")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("–†—É—Å—Å–∫–∏–π üá∑üá∫", "https://t.me/CF_Support_RU"),
                        InlineKeyboardButton.WithUrl("Deutsch üá©üá™", "https://t.me/CF_Support_DE")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Technischer Support",
                replyMarkup: inlineKeyboard);
        }

        public static async void Info(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå Benutzervereinbarung",
                            "https://telegra.ph/Benutzervereinbarung-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Cashflow-Regeln", "https://telegra.ph/Cashflow-Regeln-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithUrl("üìå Cashflow-Tabellen", "https://telegra.ph/Tische-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Rollen", "https://telegra.ph/3-ROLLEN-07-21"),
                        InlineKeyboardButton.WithUrl("üìå Tabellenbedingungen",
                            "https://telegra.ph/Cashflow-Tabellen-07-21")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                $"Info",
                replyMarkup: inlineKeyboard);
        }

        public static async void TableMenu(ITelegramBotClient botClient, long chatId)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéó kupfer Tisch", "CopperTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•â bronze Tisch", "BronzeTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•à silberner Tisch", "SilverTable")
                    },
                    /*new[]
                    {
                        InlineKeyboardButton.WithCallbackData("ü•á goldener Tisch", "GoldTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üéñ platin Tisch", "PlatinumTable")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üíé diamant Tisch", "DiamondTable")
                    },*/
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("Zur√ºck", "MainMenu")
                    }
                });

            var sentMessage = await botClient.SendTextMessageAsync(
                chatId,
                "W√§hle einen Tisch",
                replyMarkup: inlineKeyboard);
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            UserData userData, Table.TableType tableType)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(
                new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                        InlineKeyboardButton.WithCallbackData("JA", "Open" + callbackData.Data)
                    }
                });
            if (userData.playerData.tableRole == "giver")
            {
                switch (tableType)
                {
                    case Table.TableType.copper:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 100$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.bronze:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 400$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.silver:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 1000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.gold:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 2500$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.platinum:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 5000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                    case Table.TableType.diamond:
                    {
                        var sentMessage = await botClient.SendTextMessageAsync(
                            chatId,
                            $"An diesem Tisch m√ºssen Sie 10000$ spenden\nSind Sie sicher, dass Sie an diesen Tisch gehen m√∂chten?",
                            replyMarkup: inlineKeyboard);
                        break;
                    }
                }
            }
            else
            {
                var sentMessage = await botClient.SendTextMessageAsync(
                    chatId,
                    $"Sind Sie sicher, dass Sie an diesem Tisch teilnehmen m√∂chten?",
                    replyMarkup: inlineKeyboard);
            }
        }

        public static async void Warning(ITelegramBotClient botClient, long chatId, CallbackQuery callbackData,
            WebManager.RequestType requestType)
        {
            switch (requestType)
            {
                case WebManager.RequestType.LeaveTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"M√∂chten Sie diesen Tisch wirklich verlassen?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.RemoveFromTable:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"M√∂chten Sie diesen Benutzer wirklich aus der Tabelle entfernen?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
                case WebManager.RequestType.Confirm:
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("NEIN", "ChooseTable"),
                                InlineKeyboardButton.WithCallbackData("JA", "Confirm" + callbackData.Data)
                            }
                        });
                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"M√∂chten Sie die Zahlung von diesem Nutzer wirklich best√§tigen?",
                        replyMarkup: inlineKeyboard);
                    break;
                }
            }
        }

        public class TablesDE : Tables
        {
            public static async void Copper(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "copper";
                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.copper, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.copper, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Bronze(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "bronze";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.bronze, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Silver(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "silver";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.silver, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.silver, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Gold(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "gold";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.gold, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.gold, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Platinum(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "platinum";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.platinum, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }

            public static async void Diamond(ITelegramBotClient botClient, long chatId, UserData userData)
            {
                userData.playerData.level_tableType = "diamond";

                var data = await WebManager.SendData(userData.playerData, WebManager.RequestType.RegisterIntoTable);
                if (!data.error.isError)
                {
                    switch (userData.playerData.tableRole)
                    {
                        case "giver":
                            Giver(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "manager":
                            Manager(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                        case "banker":
                            Banker(botClient, chatId, Table.TableType.diamond, userData);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("ERROR");
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        new[]
                        {
                            new[]
                            {
                                InlineKeyboardButtonChooseTableDE
                            }
                        });

                    var sentMessage = await botClient.SendTextMessageAsync(
                        chatId,
                        $"Leider gibt es noch keine solchen Tabellen, bitte versuchen Sie es sp√§ter erneut",
                        replyMarkup: inlineKeyboard);
                }
            }
        }
    }
}